// const rsasign = require('jsrsasign');
// const crypto = require('crypto')
import TransactionHistory from "./requests/TransactionHistory";

// const Web3 = require('web3');
// const web3 = new Web3(new Web3.providers.HttpProvider('https://ropsten.infura.io/v3/c6ffc7b60a174cf6817cd3b56e6019e2'));

        // console.log(this.state.amount, this.state.address)
        // let data = {
        //     amount: Number(this.state.amount),
        //     to: this.state.address
        // }
        // this.props.background.postMessage({popup: true, type: 'tx', data: data})

        // 'amount','data','from','nonce','ticker','to'


            // enqTX.sign = await this.ecdsa_sign(user.privateKey, enqTX.hash)
            // console.log(enqTX)

            // let rawTx = {
            //     nonce: web3.utils.toHex(1),
            //     gasPrice: web3.utils.toHex(20000000000),
            //     gasLimit: web3.utils.toHex(30000000000),
            //     to: '',
            //     value: web3.utils.toHex(1000000),
            //     data: '0xc0de',
            //     networkId: 3
            // };
            // console.log(rawTx)

            // let gasPrice = await web3.eth.gasPrice
            // console.log(gasPrice, typeof gasPrice);

            // let testData = '0x7f4e616d65526567000000000000000000000000000000000000000000000000003057307f4e616d6552656700000000000000000000000000000000000000000000000000573360455760415160566000396000f20036602259604556330e0f600f5933ff33560f601e5960003356576000335700604158600035560f602b590033560f60365960003356573360003557600035335700'
            // let testData = '0x'

            // let resultGas = await web3.eth.estimateGas({
            //     to: this.state.address,
            //     data: this.state.data
            // });
            // console.log(resultGas)

            // let gas = 500 * 1e9
            // let gas = 15092388
            // console.log(gas)
            // let value = web3.utils.toWei(this.state.amount, 'ether').toString()
            // console.log(value)

            // console.log(web3.eth.gasPrice, typeof web3.eth.gasPrice);
            // const txMain = new tx({
            //     nonce: web3.utils.toHex(1048576),
            //     from: this.state.address,
            //     to: this.state.address,
            //     gasPrice: web3.utils.toHex(20e9),
            //     gasLimit: web3.utils.toHex(21000),
            //     value: web3.utils.toHex(web3.utils.toWei(this.state.amount, 'ether')), // 1 eth
            //     data: this.state.data,
            //     chainId: '0x03'
            // }, {chain: 'ropsten', hardfork: 'petersburg'})

            // 0x029ca56f6af280ce7fa6383006a669299e9c4f44d899ccfd466fb29f1a2440400c
            // 0x3ff9d7b3d4767175ed7c5190a4c37a07555061b0a1406a33eeac3aa75d4e9d84

            // console.log(txMain)
            // const txMain = new tx(rawTx)

            // let serializedTx = enqTX.serialize().toString('hex')
            // console.log(serializedTx)

            // eth.signTransaction("44'/60'/0'/0/0", serializedTx).then(transaction => {
            //
            //     console.log(transaction)
            //
            //     txMain.v = '0x' + transaction.v
            //     txMain.r = '0x' + transaction.r
            //     txMain.s = '0x' + transaction.s
            //
            //     console.log(txMain)
            //
            //     const signedTx = new tx(txMain)
            //     const signedSerializedTx = signedTx.serialize().toString('hex')
            //
            //     web3.eth.sendSignedTransaction('0x' + signedSerializedTx).then(txHash => {
            //         console.log('tx hash: ', {txHash})
            //     })
            //
            // }).catch(e => {
            //     console.log(e)
            // })


            // eth.signPersonalMessage("44'/60'/0'/0/0", '').then(transaction => {
            //
            //     console.log(transaction)

            // txMain.v = '0x' + transaction.v
            // txMain.r = '0x' + transaction.r
            // txMain.s = '0x' + transaction.s
            //
            // console.log(txMain)
            //
            // const signedTx = new tx(txMain)
            // const signedSerializedTx = signedTx.serialize().toString('hex')
            //
            // web3.eth.sendSignedTransaction('0x' + signedSerializedTx).then(txHash => {
            //     console.log('tx hash: ', {txHash})
            // })

            // }).catch(e => {
            //     console.log(e)
            // })


                // async hash_tx_fields(tx) {
                //     if (!tx)
                //         return undefined;
                //     let model = ['amount', 'data', 'from', 'nonce', 'ticker', 'to'];
                //     let str;
                //     try {
                //         str = model.map(v =>
                //             crypto.createHash('sha256')
                //                 .update(tx[v].toString().toLowerCase())
                //                 .digest('hex')
                //         ).join('');
                //     } catch (e) {
                //         if (e instanceof TypeError) {
                //             console.warn('Old tx format, skip new fields...');
                //             return undefined;
                //         }
                //     }
                //     return crypto.createHash('sha256').update(str).digest('hex');
                // }
